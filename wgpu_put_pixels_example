use winit::{
    dpi::LogicalSize,
    event::*,
    event_loop::{EventLoop, EventLoopWindowTarget}, 
    keyboard::{KeyCode, PhysicalKey},
    window::{WindowBuilder, Window},
};

#[cfg(target_arch="wasm32")]
use wasm_bindgen::prelude::*;

type Rgb = [u8; 4];

struct State<'a> {
    // state for wgpu
    surface: wgpu::Surface<'a>,
    device: wgpu::Device,
    queue: wgpu::Queue,
    config: wgpu::SurfaceConfiguration,
    size: winit::dpi::PhysicalSize<u32>,
    window: &'a Window,
    render_pipeline: wgpu::RenderPipeline,
    bind_group: wgpu::BindGroup,
    texture: wgpu::Texture,
    // texture_data: Vec<Rgb>,
    // vars to keep track of misc state
    surface_configured: bool,
    k_texture_width: u32,
    k_texture_height: u32,
}

impl<'a> State<'a> {
    async fn new(window: &'a Window) -> State<'a> {
        let size = window.inner_size();

        let instance = wgpu::Instance::new(wgpu::InstanceDescriptor{
            #[cfg(not(target_arch="wasm32"))]
            backends: wgpu::Backends::PRIMARY,
            #[cfg(target_arch="wasm32")]
            backends: wgpu::Backends::BROWSER_WEBGPU,
            ..Default::default()
        });

        let surface = instance.create_surface(window).unwrap();

        let adapter = instance.request_adapter(
            &wgpu::RequestAdapterOptions{
                power_preference: wgpu::PowerPreference::default(),
                compatible_surface: Some(&surface),
                force_fallback_adapter: false,
            }
        ).await.unwrap();

        let (device, queue) = adapter.request_device(&wgpu::DeviceDescriptor{
            required_features: wgpu::Features::empty(),
            required_limits: wgpu::Limits::default(),
            label: None,
            memory_hints: Default::default(),
        }, None).await.unwrap();

        let surface_capabilities = surface.get_capabilities(&adapter);

        let surface_format = surface_capabilities.formats.iter()
            .find(|f| f.is_srgb())
            .copied()
            .unwrap_or(surface_capabilities.formats[0]);
        let config = wgpu::SurfaceConfiguration{
            usage: wgpu::TextureUsages::RENDER_ATTACHMENT,
            format: surface_format,
            width: size.width,
            height: size.height,
            present_mode: surface_capabilities.present_modes[0],
            alpha_mode: surface_capabilities.alpha_modes[0],
            view_formats: vec![],
            desired_maximum_frame_latency: 2,
        };

        let shader = device.create_shader_module(wgpu::ShaderModuleDescriptor{
            label: Some("Shader"),
            source: wgpu::ShaderSource::Wgsl(include_str!("shader.wgsl").into())
        });
        
        let k_texture_width = 5;
        let k_texture_height = 7;
        let r: Rgb = [255, 0, 0, 255];
        let g: Rgb = [0, 255, 0, 255];
        let u: Rgb = [0, 0, 255, 255];
        let w: Rgb = [255, 255, 255, 255];
        let b: Rgb = [0, 0, 0, 255];

        let texture_data = vec![
            u, r, r, r, r,
            r, u, u, u, r,
            r, u, r, r, r,
            r, u, r, r, r,
            r, u, g, g, r,
            u, u, u, g, r,
            r, r, r, u, u,
        ];



        let texture = device.create_texture(&wgpu::TextureDescriptor{
            label: Some("hard coded texture"),
            size: wgpu::Extent3d{
                width: k_texture_width,
                height: k_texture_height,
                depth_or_array_layers: 1,
            },
            format: wgpu::TextureFormat::Bgra8UnormSrgb,
            usage: wgpu::TextureUsages::TEXTURE_BINDING | wgpu::TextureUsages::COPY_DST | wgpu::TextureUsages::RENDER_ATTACHMENT,
            mip_level_count: 1,
            sample_count: 1,
            dimension: wgpu::TextureDimension::D2,
            view_formats: &[wgpu::TextureFormat::Bgra8UnormSrgb]
        });

        queue.write_texture(
            wgpu::ImageCopyTextureBase { texture: &texture,
                mip_level: 0,
                origin: wgpu::Origin3d{
                    x: 0,
                    y: 0,
                    z: 0,
                },
                aspect: wgpu::TextureAspect::All,
            },
            texture_data.as_flattened(), 
            wgpu::ImageDataLayout{
                offset: 0,
                bytes_per_row: Some(k_texture_width * 4),
                rows_per_image: None,
            }, 
            wgpu::Extent3d { 
                width: k_texture_width,
                height: k_texture_height,
                depth_or_array_layers: 1 
            });
        
        let sampler = device.create_sampler(&wgpu::SamplerDescriptor::default());

        let bind_group_layout = device.create_bind_group_layout(&wgpu::BindGroupLayoutDescriptor{
            label: Some("texture bind group descriptor"),
            entries: &[
                wgpu::BindGroupLayoutEntry {
                    binding: 0,
                    visibility: wgpu::ShaderStages::FRAGMENT,
                    ty: wgpu::BindingType::Sampler(wgpu::SamplerBindingType::NonFiltering),
                    count: None,
                }, wgpu::BindGroupLayoutEntry {
                    binding: 1,
                    visibility: wgpu::ShaderStages::FRAGMENT,
                    ty: wgpu::BindingType::Texture { 
                        sample_type: wgpu::TextureSampleType::Float { filterable: true }, 
                        view_dimension: wgpu::TextureViewDimension::D2, 
                        multisampled: false },
                    count: None,
                }]
        });

        
        let bind_group = device.create_bind_group(&wgpu::BindGroupDescriptor { 
            label: Some("texture bind group descriptor"), 
            layout: &bind_group_layout, 
            entries: &[
                wgpu::BindGroupEntry{
                    binding: 0,
                    resource: wgpu::BindingResource::Sampler(&sampler)
                },
                wgpu::BindGroupEntry {
                    binding: 1,
                    resource: wgpu::BindingResource::TextureView(&texture.create_view(&wgpu::TextureViewDescriptor::default()))
                }
            ]
        });

        let render_pipeline_layout = device.create_pipeline_layout(&wgpu::PipelineLayoutDescriptor{
            label: Some("render pipeline layout"),
            bind_group_layouts: &[&bind_group_layout],
            push_constant_ranges: &[],
        });

        let render_pipeline = device.create_render_pipeline(&wgpu::RenderPipelineDescriptor{
            label: Some("render pipeline"),
            layout: Some(&render_pipeline_layout),
            vertex: wgpu::VertexState {
                module: &shader,
                entry_point: "vs_main",
                compilation_options: wgpu::PipelineCompilationOptions::default(),
                buffers: &[],
            },
            fragment: Some(wgpu::FragmentState{
                module: &shader,
                entry_point: "fs_main",
                compilation_options: wgpu::PipelineCompilationOptions::default(),
                targets: &[Some(wgpu::ColorTargetState{
                    format: config.format,
                    blend: Some(wgpu::BlendState::REPLACE),
                    write_mask: wgpu::ColorWrites::ALL,
                })],
            }),
            primitive: wgpu::PrimitiveState {
                topology: wgpu::PrimitiveTopology::TriangleList,
                strip_index_format: None,
                front_face: wgpu::FrontFace::Ccw,
                cull_mode: Some(wgpu::Face::Back),
                polygon_mode: wgpu::PolygonMode::Fill,
                unclipped_depth: false,
                conservative: false,
            },
            depth_stencil: None,
            multisample: wgpu::MultisampleState {
                count: 1,
                mask: !0,
                alpha_to_coverage_enabled: false,
            },
            multiview: None,
            cache: None,
        });

        Self {
            window,
            surface,
            device,
            queue,
            config,
            size,
            render_pipeline,
            bind_group,
            surface_configured: false,
            texture,
            k_texture_width,
            k_texture_height,
        }
    }

    pub fn window(&self) -> &Window {
        &self.window
    }

    fn resize(&mut self, new_size: winit::dpi::PhysicalSize<u32>) {
        if new_size.width > 0 && new_size.height > 0 {
            self.size = new_size;
            self.config.width = new_size.width;
            self.config.height = new_size.height;
            self.surface.configure(&self.device, &self.config);
        }
    }

    // used to capture an event so the loop will keep processing it
    fn input(&mut self, event: &WindowEvent) -> bool{
        false
    }

    fn update(&mut self) {
        // todo!()
    }

    pub fn update_texture(&mut self, new_texture_data: Vec<Rgb>) {
        if new_texture_data.len() as u32 > self.k_texture_height * self.k_texture_width {
            panic!("Invalid number of bytes in new texture data");
        }

        self.queue.write_texture(
            wgpu::ImageCopyTextureBase{
                texture: &self.texture,
                mip_level: 0,
                origin: wgpu::Origin3d {
                    x: 0,
                    y: 0,
                    z: 0,
                },
                aspect: wgpu::TextureAspect::All,
            }, 
            new_texture_data.as_flattened(), 
            wgpu::ImageDataLayout { 
                offset: 0, 
                bytes_per_row: Some(self.k_texture_width * 4), 
                rows_per_image: None 
            }, 
            wgpu::Extent3d { 
                width: self.k_texture_width, 
                height: self.k_texture_height, 
                depth_or_array_layers: 1 
            }
        );

    }

    fn render(&mut self) -> Result<(), wgpu::SurfaceError> {
        let output = match self.surface.get_current_texture() {
            Ok(s) => s,
            Err(e) => panic!("{:?}", e.to_string()),
        };

        let view = output.texture.create_view(&wgpu::TextureViewDescriptor::default());

        let mut encoder = self.device.create_command_encoder(&wgpu::CommandEncoderDescriptor{
            label: Some("render encoder"),
        });

        // render pass. New block because we need to drop encoder mutable reference
        {
            let mut render_pass = encoder.begin_render_pass(&wgpu::RenderPassDescriptor {
                label: Some("render pass"),
                color_attachments: &[Some(wgpu::RenderPassColorAttachment {
                    view: &view,
                    resolve_target: None,
                    ops: wgpu::Operations {
                        load: wgpu::LoadOp::Clear(wgpu::Color { 
                            r: 0.1, 
                            g: 0.2, 
                            b: 0.3, 
                            a: 1.0,
                        }),
                        store: wgpu::StoreOp::Store,
                    },
                })],
                depth_stencil_attachment: None,
                occlusion_query_set: None,
                timestamp_writes: None,
            });

            render_pass.set_pipeline(&self.render_pipeline);
            render_pass.set_bind_group(0, &self.bind_group, &[]);
            render_pass.draw(0..6, 0..1);
        }


        self.queue.submit(std::iter::once(encoder.finish()));
        output.present();

        Ok(())
    }

}


#[cfg_attr(target_arch="wasm32", wasm_bindgen(start))]
pub async fn run() {

    cfg_if::cfg_if! {
        if #[cfg(target_arch = "wasm32")] {
            std::panic::set_hook(Box::new(console_error_panic_hook::hook));
            console_log::init_with_level(log::Level::Warn).expect("Couldn't initialize logger");
        } else {
            env_logger::init();
        }
    }
    
    let event_loop = EventLoop::new().unwrap();
    let window = WindowBuilder::new().build(&event_loop).unwrap();

    #[cfg(target_arch = "wasm32")]
    {
    // Winit prevents sizing with CSS, so we have to set
    // the size manually when on web.
    use winit::dpi::PhysicalSize;
    let _ = window.request_inner_size(PhysicalSize::new(450, 450));
    
    use winit::platform::web::WindowExtWebSys;
    web_sys::window()
        .and_then(|win| win.document())
        .and_then(|doc| {
            let dst = doc.get_element_by_id("wasm-example")?;
            let canvas = web_sys::Element::from(window.canvas()?);
            dst.append_child(&canvas).ok()?;
            Some(())
        })
        .expect("Couldn't append canvas to document body.");
    }


    let mut state = State::new(&window).await;

    let r: Rgb = [255, 0, 0, 255];
    let g: Rgb = [0, 255, 0, 255];
    let u: Rgb = [0, 0, 255, 255];
    let w: Rgb = [255, 255, 255, 255];
    let b: Rgb = [0, 0, 0, 255];

    let texture_data_two = vec![
        w, b, b, b, b,
        b, w, w, w, b,
        b, b, b, w, b,
        b, b, b, b, b,
        b, b, b, b, b,
        b, b, b, b, b,
        b, b, b, b, b,
    ];

    let _ = event_loop.run(move |event, control_flow| match event {
        Event::WindowEvent {
            ref event,
            window_id,
        } if window_id == state.window.id() => if !state.input(event) {
            match event {
                WindowEvent::CloseRequested
                | WindowEvent::KeyboardInput {
                    event:
                        KeyEvent {
                            state: ElementState::Pressed,
                            physical_key: PhysicalKey::Code(KeyCode::Escape),
                            ..
                        },
                    ..
                } => control_flow.exit(),
                WindowEvent::KeyboardInput { 
                    event:
                        KeyEvent {
                            state: ElementState::Pressed,
                            physical_key: PhysicalKey::Code(KeyCode::Space),
                            ..
                        },
                    ..
                } => {
                    state.update_texture(texture_data_two.to_owned());
                    state.window.request_redraw();
                }
                WindowEvent::Resized(physical_size) => {
                    state.resize(*physical_size);
                    state.surface_configured = true;
                },
                WindowEvent::RedrawRequested if window_id == state.window().id() => {
                    if !state.surface_configured {
                        return;
                    }
                    state.update();
                    match state.render() {
                        Ok(_) => {},
                        Err(wgpu::SurfaceError::Lost) => state.resize(state.size),
                        Err(wgpu::SurfaceError::OutOfMemory) => control_flow.exit(),
                        Err(e) => eprint!("{:?}", e),
                    }
                },
                _ => {}
            }
        },
        Event::AboutToWait => { state.window().request_redraw(); }
        _ => {}
    });
}

